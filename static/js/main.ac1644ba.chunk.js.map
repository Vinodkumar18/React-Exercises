{"version":3,"sources":["serviceWorker.ts","components/display/display.component.tsx","components/keyboard/keyboard.component.tsx","components/calculator.component.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Display","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","className","props","React","Component","Keyboard","_getPrototypeOf2","_this","_len","length","args","Array","_key","call","concat","onKeyboardButtonClicked","property","action","_this2","onClick","Calculator","state","firstNumber","secondNumber","operation","result","displayValue","currentNumber","doAction","addOperation","reset","changeSign","calculatePercentage","calculateResult","appendNumber","Number","currentKey","currentState","setState","setResult","display_component_Display","keyboard_component_Keyboard","ReactDOM","render","calculator_component_Calculator","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ac1644ba.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\n\ninterface Inputs {\n    \"value\" : string\n}\n\nexport class Display extends React.Component<Inputs> {\n    render(){\n        return (\n            <div className=\"display-4 comp-display p-2\">\n                {this.props.value}\n            </div>\n        );\n    };\n}","import React from \"react\";\nimport \"./keyboard.component.css\";\n\ninterface Inputs {\n    action : Function;\n}\n\nexport class Keyboard extends React.Component<Inputs> {\n    render() {\n        return (\n            <div className=\"d-flex flex-row\">\n                <div className=\"d-flex flex-column col-10 p-0\">\n                    <div className=\"d-flex flex-row\">\n                        <div className=\"container-fluid p-0\">\n                            <div className=\"row\">\n                                <button className=\"col p-4 keyboard-button\" onClick={() => this.onKeyboardButtonClicked(\"AC\") }>AC</button>\n                                <button className=\"col p-4 keyboard-button\" onClick={() => this.onKeyboardButtonClicked(\"+/-\") }>+/-</button>\n                                <button className=\"col p-4 keyboard-button\" onClick={() => this.onKeyboardButtonClicked(\"%\") } >%</button>\n                            </div>\n                            <div className=\"row\">\n                                <button className=\"col p-4 keyboard-button\" onClick={() => this.onKeyboardButtonClicked(\"7\") } >7</button>\n                                <button className=\"col p-4 keyboard-button\" onClick={() => this.onKeyboardButtonClicked(\"8\") } >8</button>\n                                <button className=\"col p-4 keyboard-button\" onClick={() => this.onKeyboardButtonClicked(\"9\") } >9</button>\n                            </div>\n                            <div className=\"row\">\n                                <button className=\"col p-4 keyboard-button\" onClick={() => this.onKeyboardButtonClicked(\"4\") } >4</button>\n                                <button className=\"col p-4 keyboard-button\" onClick={() => this.onKeyboardButtonClicked(\"5\") } >5</button>\n                                <button className=\"col p-4 keyboard-button\" onClick={() => this.onKeyboardButtonClicked(\"6\") } >6</button>\n                            </div>\n                            <div className=\"row\">\n                                <button className=\"col p-4 keyboard-button\" onClick={() => this.onKeyboardButtonClicked(\"1\") } >1</button>\n                                <button className=\"col p-4 keyboard-button\" onClick={() => this.onKeyboardButtonClicked(\"2\") } >2</button>\n                                <button className=\"col p-4 keyboard-button\" onClick={() => this.onKeyboardButtonClicked(\"3\") } >3</button>\n                            </div>\n                            <div className=\"row\">\n                                <button className=\"col-8 p-4 keyboard-button\" onClick={() => this.onKeyboardButtonClicked(\"0\") } >0</button>\n                                <button className=\"col-4 p-4 keyboard-button\" onClick={() => this.onKeyboardButtonClicked(\".\") } >.</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"d-flex flex-column col-2 p-0\">\n                    <div className=\"d-flex flex-row\">\n                        <div className=\"container-fluid p-0 keyboard-operations\">\n                                <button className=\"col p-4 keyboard-button\" onClick={() => this.onKeyboardButtonClicked(\"÷\") } >÷</button>\n                                <button className=\"col p-4 keyboard-button\" onClick={() => this.onKeyboardButtonClicked(\"x\") } >x</button>\n                                <button className=\"col p-4 keyboard-button\" onClick={() => this.onKeyboardButtonClicked(\"-\") } >-</button>\n                                <button className=\"col p-4 keyboard-button\" onClick={() => this.onKeyboardButtonClicked(\"+\") } >+</button>\n                                <button className=\"col p-4 keyboard-button\" onClick={() => this.onKeyboardButtonClicked(\"=\") } >=</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    onKeyboardButtonClicked = (property : String) => {\n        this.props.action(property);\n    }\n}","import React from \"react\";\nimport { Display } from \"./display/display.component\";\nimport { Keyboard } from \"./keyboard/keyboard.component\";\nimport \"./calculator.component.css\";\n\nexport class Calculator extends React.Component {\n    state = {\n        firstNumber : \"0\",\n        secondNumber : \"0\",\n        operation : \"\",\n        result : \"0\",\n        displayValue : \"0\",\n        currentNumber : 1    \n    }\n\n    render() {\n        return (\n            <div className=\"d-flex flex-column flex-wrap\">\n                <Display value={ this.state.displayValue }/>\n                <Keyboard action={ this.action }/>\n            </div>\n        );\n    }\n\n    action = (property : string) => {\n        this.doAction(property);\n    }\n\n    doAction = (property : string) => {\n        switch(property) {\n            case \"+\":\n            case \"-\":\n            case \"x\":\n            case \"÷\":\n                this.addOperation(property);\n                break;\n            case \"AC\":\n                this.reset();\n                break;\n            case \"+/-\":\n                this.changeSign();\n                break;\n            case \"%\":\n                this.calculatePercentage();\n                break;\n            case \"=\":\n                this.calculateResult();\n                break;\n            default: \n                this.appendNumber(property); \n        }\n    }\n\n    changeSign = () => {\n        let currentNumber = Number(this.state.firstNumber);\n        let currentKey = \"firstNumber\";\n        if(this.state.currentNumber === 2){\n            currentNumber = Number(this.state.secondNumber);\n            currentKey = \"secondNumber\";\n        }\n        if( currentNumber !== 0){\n            currentNumber *= -1; \n        }\n        let currentState: any = {\n            \"displayValue\" : currentNumber\n        }\n        currentState[currentKey] = currentNumber;\n        this.setState(currentState);\n    }\n\n    calculatePercentage = () => {\n        this.setResult(Number(this.state.firstNumber)/100);\n    }\n\n    calculateResult = () => {\n        let firstNumber = Number(this.state.firstNumber);\n        let secondNumber = Number(this.state.secondNumber);\n        let operation = this.state.operation;\n        let result : any = 0;\n        switch(operation) {\n            case \"+\":\n                result = firstNumber + secondNumber;\n                break;\n            case \"-\":\n                result = firstNumber - secondNumber;\n                break;\n            case \"x\":\n                result = firstNumber * secondNumber;\n                break;\n            case \"÷\":\n                result = firstNumber / secondNumber;\n                break;\n        }\n        this.setResult(result);\n    }\n\n    appendNumber = (property : string) => {\n        let currentNumber = this.state.firstNumber;\n        let currentKey = \"firstNumber\";\n        if(this.state.currentNumber === 2){\n            currentNumber = this.state.secondNumber;\n            currentKey = \"secondNumber\";\n        }\n        if(currentNumber === \"0\" && property !== \".\"){\n            currentNumber = property;\n        } else {\n            currentNumber += property;\n        }\n        let currentState: any = {\n            \"displayValue\" : currentNumber\n        }\n        currentState[currentKey] = currentNumber;\n        this.setState(currentState);\n    }\n\n    reset() {\n        this.setState({\n            firstNumber : \"0\",\n            secondNumber : \"0\",\n            operation : \"\",\n            result : \"0\",\n            displayValue : \"0\",\n            currentNumber : 1    \n        });\n    }\n\n    addOperation = (property : String) => {\n        if(this.state.operation){\n            this.calculateResult();\n            return;\n        }\n        this.setState({\n            \"operation\" : property,\n            \"currentNumber\" : 2\n        });\n    }\n\n    setResult = (result : number) => {\n        this.setState({\n            \"firstNumber\" : result,\n            \"secondNumber\" : \"0\",\n            \"operation\" : \"\",\n            \"currentNumber\" : 1,\n            \"result\" : result,\n            \"displayValue\" : result\n        });\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\n// Bootstrap\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport { Calculator } from './components/calculator.component';\n\nReactDOM.render(<Calculator />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}